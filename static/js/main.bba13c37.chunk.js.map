{"version":3,"sources":["gameComponents/Board.js","gameComponents/boggle_solver.js","gameComponents/Score.js","gameComponents/Timer.js","gameComponents/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Board","board","this","props","class","style","alignSelf","map","row","i","elem","j","Component","deltas","path_to_str","grid","start","path","width","height","x","y","word","seen","Set","join","direction","dx","dy","has","add","push","toUpperCase","findAllSolutions","dictionary","length","valid_words","answers","prefixes","len","slice","go_back","num_directions","pop","input","output","results","w","returnOutput","Score","words","total","correct_words","filter","correct","num_correct","words_missed","stringCorrect","text","trigger","className","modal","nested","close","onClick","console","log","Timer","decrement","setState","secondsLeft","state","seconds","setInterval","Game","changeGuess","e","target","name","value","submitGuess","preventDefault","score","guess","justguessed","guesses","correctGuesses","allSolutions","includes","finishGame","scoredWords","isFinished","rand_grid","chars","cube","Math","floor","random","sort","col","RandomGrid","solutions","setTimeout","item","key","autocomplete","onChange","App","useState","playing","setPlaying","useSpring","color","set","onMouseEnter","onMouseLeave","span","div","transform","interpolate","v","stop","config","duration","from","opacity","to","fontSize","num","type","bg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bba13c37.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n  render() {\r\n    const board = this.props.board;\r\n    // const color_ = this.props.color;\r\n    return (\r\n      <div class=\"board\" style = {{alignSelf:'center'}}>\r\n      <table>\r\n      {board.map((row, i) => {\r\n        return (\r\n          <tr>\r\n          {row.map((elem, j)=>{\r\n            return <td key={i}>{elem}</td>\r\n          })}\r\n          </tr>)})}\r\n      </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","function findAllSolutions(grid, dictionary) {\r\n    if (!dictionary || !dictionary.length || !grid || !grid.length || !grid[0].length) {\r\n      return []\r\n    }\r\n    const height = grid.length\r\n    const width = grid[0].length\r\n    // There're 8 directions: north, west, south, east, north-west, south-west, north-east and south-east\r\n    const num_directions = 8 \r\n    let valid_words = new Set()\r\n    for (var word of dictionary) {\r\n      if (word.length >= 3) {\r\n        valid_words.add(word.toUpperCase())\r\n      }\r\n    }\r\n    let answers = new Set()\r\n    let prefixes = new Set()\r\n    for (word of valid_words) {\r\n      for (var len=1; len<=word.length; len++) {\r\n        prefixes.add(word.slice(0,len))\r\n      }\r\n    }\r\n    // For each cell in the grid, do depth-first-search to find valid words.\r\n    for (var x=0; x<width; x++) {\r\n      for (var y=0; y<height; y++) {\r\n        let path = [0]  // List (stack) of directions numbered 0-7.\r\n        let go_back = false\r\n        while (path.length > 0) {\r\n          word = path_to_str(grid, [x,y], path, width, height)\r\n          if (valid_words.has(word)) {\r\n            answers.add(word)\r\n          }\r\n          if (!prefixes.has(word) || go_back) {\r\n            if (path[path.length-1] === num_directions-1) {\r\n              path.pop()\r\n              go_back = true\r\n            }\r\n            else {\r\n              path[path.length-1]++  // Change direction of last step.\r\n              go_back = false\r\n            }\r\n          } else {\r\n            path.push(0)  // Add step going in direction `0`.\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return returnOutput(dictionary, answers)\r\n  }\r\n  \r\n  // Deltas are changes in coordinates cooresponding to given directions.\r\n  const deltas = [[0, 1], [1, 1], [1, 0], [1, -1],\r\n                  [0, -1], [-1, -1], [-1, 0], [-1, 1]]\r\n  \r\n  function path_to_str(grid, start, path, width, height){\r\n    let [x, y] = start\r\n    let word = [grid[y][x]]\r\n    let seen = new Set([start.join(';')])\r\n    for (var direction of path) {\r\n      var [dx, dy] = deltas[direction]\r\n      x += dx\r\n      y += dy\r\n      if (seen.has(x+';'+y) ||\r\n          !(0 <= y && y < height && 0 <= x && x < width)) {\r\n        return \"\"\r\n      }\r\n      // We create pairs (x,y) with a string instead of an array since arrays aren't hashable.\r\n      seen.add(x+';'+y)\r\n      word.push(grid[y][x])\r\n    }\r\n    return word.join('').toUpperCase()\r\n  }\r\n  \r\n  function returnOutput(input, output) {\r\n    let results = []\r\n    for (var w of input) {\r\n      if (output.has(w.toUpperCase())) {\r\n        results.push(w)\r\n      }\r\n    }\r\n    return results\r\n  }\r\n  \r\n  export default findAllSolutions;\r\n","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport './Score.css';\r\n\r\n\r\nclass Score extends Component {\r\n  render() {\r\n    const words = this.props.words;\r\n    const total = words.length;\r\n    var correct_words = words.filter(x=>x.correct)\r\n    const num_correct = correct_words.length\r\n    const words_missed = words.filter(x=>!x.correct);\r\n    \r\n    const stringCorrect = <h2>You found these words: </h2>;\r\n    if (correct_words.length === 0){\r\n      correct_words = [{correct:true, text:\"None\"}]\r\n    }\r\n    return (\r\n      <div>\r\n\r\n        <Popup\r\n    trigger={<button className=\"button\"> Click Here to See What Words You Missed </button>}\r\n    modal\r\n    nested\r\n  >\r\n    {close => (\r\n      <div className=\"modal\">\r\n        <button className=\"close\" onClick={close}>\r\n          &times;\r\n        </button>\r\n        <div className=\"header\"> Score Details </div>\r\n        <div className=\"content\">\r\n          <div>\r\n            <h>{stringCorrect}</h>\r\n          </div>\r\n          <div>\r\n            {correct_words.map((word) => <h>{word.text}</h>)}\r\n          </div>\r\n          <div>\r\n            <h2>Oopsie, Looks like you missed these words:</h2> \r\n          </div>\r\n          {words_missed.map((word) => <h>{word.text},  </h>)}\r\n        </div>\r\n        <div className=\"actions\">\r\n          <button\r\n            className=\"button\"\r\n            onClick={() => {\r\n              console.log('modal closed ');\r\n              close();\r\n            }}\r\n          >Close \r\n          </button>\r\n        </div>\r\n      </div>\r\n    )}\r\n\r\n  </Popup>\r\n      You found {num_correct} words out of {total}!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\nimport {Spring} from 'react-spring/renderprops'\r\nimport './Score.css';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n   super(props);\r\n   this.state = { secondsLeft: this.props.seconds }\r\n   setInterval(this.decrement, 1000)  // 1 second\r\n  }\r\n  decrement = () => {\r\n    this.setState({secondsLeft:this.state.secondsLeft ? this.state.secondsLeft - 1 : 0})\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"Timer\">\r\n        { this.state.secondsLeft\r\n          ? <span>{this.state.secondsLeft} Seconds left.</span>\r\n          : <span>Time's Up!</span>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;","import React, {Component} from 'react';\r\nimport './Game.css';\r\nimport Board from './Board';\r\nimport findAllSolutions from'./boggle_solver';\r\nimport valid_words from './wordlist';\r\nimport Score from './Score';\r\nimport Timer from './Timer';\r\nimport ParticlesBg from \"particles-bg\";\r\n\r\n\r\n\r\n// Returns a random 5x5 board, using the official letter distribution.\r\nfunction RandomGrid() {\r\n  // prettier-ignore\r\n  const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\r\n                \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\r\n                \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\r\n                \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\r\n                \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\r\n  let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\r\n  chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\r\n\r\n  const SIZE = 5;\r\n  let grid = [];\r\n  for (let row = 0; row < SIZE; row++) {\r\n    grid[row] = [];\r\n    for (let col = 0; col < SIZE; ++col) {\r\n      grid[row][col] = chars[SIZE * row + col];\r\n      if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\r\n    }\r\n  }\r\n  return grid;\r\n}\r\n\r\n class Game extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      const rand_grid = RandomGrid()\r\n      // const solutions = new Set(['rahmana','testing','cake'])\r\n      const solutions = new Set(findAllSolutions(rand_grid, valid_words['words']))\r\n      // alert(solutions.size);\r\n\r\n    //initializing the game state\r\n    this.state = {\r\n      justguessed: null,\r\n      grid: rand_grid,\r\n      guess: '',\r\n      correctGuesses: [],\r\n      guesses: [],\r\n      allSolutions: solutions,\r\n      score: 0,\r\n      scoredWords:[],\r\n      isFinished:false,\r\n      seconds: 60,\r\n    };\r\n  // timer in game\r\n    setTimeout(this.finishGame, this.state.seconds*1000)\r\n  }\r\n  \r\n  changeGuess = (e) => {\r\n    this.setState({[e.target.name]:e.target.value})\r\n  }\r\n  submitGuess = (e) => {\r\n    e.preventDefault();\r\n    const score = this.state.score\r\n    const justguessed = this.state.justguessed\r\n    const guess = this.state.guess\r\n    const guesses = this.state.guesses\r\n    const correctGuesses = this.state.correctGuesses\r\n    const allSolutions = this.state.allSolutions\r\n    if (guesses.includes(guess)) {\r\n      this.setState({justguessed:\"Already tried that word!\"})\r\n    }\r\n    else if (allSolutions.has(guess)) {\r\n      this.setState({correctGuesses:[...correctGuesses, guess]})\r\n      this.setState({score:score + 1})\r\n      this.setState({justguessed:\"That's Correct!\"})\r\n    }\r\n    else {\r\n      this.setState({justguessed:\"Try Again!\"})\r\n    }\r\n\r\n    this.setState({guesses:[...guesses, guess]})\r\n    this.setState({guess: ''})\r\n  }\r\n  finishGame = () => {\r\n    const allSolutions = this.state.allSolutions\r\n    const correctGuesses = this.state.correctGuesses\r\n    var scoredWords = []\r\n    for (var word of allSolutions) {\r\n      if (correctGuesses.includes(word)) {\r\n        scoredWords.push({correct:true, text:word})\r\n      } else {\r\n        scoredWords.push({correct:false, text:word})\r\n      }\r\n    }\r\n    this.setState({scoredWords:scoredWords})\r\n    this.setState({isFinished:true})\r\n  }\r\n  render() {\r\n    const correctGuesses = this.state.correctGuesses.map((item, key)=>\r\n      <span>{item}<br /></span>\r\n    );\r\n    const isFinished = this.state.isFinished;\r\n    const scoredWords = this.state.scoredWords;\r\n    const justguessed = this.state.justguessed;\r\n\r\n    return (\r\n      <div className = \"game\">\r\n         {isFinished ? \"Game Ended\" :\r\n        <div>\r\n          <Timer seconds={this.state.seconds} />\r\n          </div>}\r\n\r\n        <div>\r\n          {isFinished ? null : <Board board = {this.state.grid} />}\r\n        </div>\r\n        <div>\r\n         {isFinished ? null : <button onClick={this.finishGame}>Stop</button> }\r\n        </div>\r\n\r\n        <div>\r\n        {isFinished ? null :\r\n        <form autocomplete=\"off\">\r\n          <input\r\n            name='guess'\r\n            value={this.state.guess}\r\n            onChange={(e) => this.changeGuess(e)} />\r\n          <button onClick={(e) => this.submitGuess(e)}>Guess</button>\r\n        </form>}\r\n        </div>\r\n        {isFinished ? <Score words={scoredWords} /> : justguessed}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import './App.css';\nimport { Component } from 'react';\nimport React, { useState } from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport { useSpring, animated } from \"react-spring\";\nimport ParticlesBg from \"particles-bg\";\nimport Game from './gameComponents/Game';\n\n\nfunction App() {\n  const [playing, setPlaying] = useState(false);\n  const [{ y, color }, set] = useSpring(() => ({ y: 100, color: \"#fff\" }));\n  const start = (<button\n      onMouseEnter={() => set({ y: 0, color: \"#000\" })}\n      onMouseLeave={() => set({ y: 100, color: \"#fff\" })}\n     onClick={() => setPlaying(true)}>\n         <animated.span style={{ color }}>\n          Let's Play!\n        </animated.span>\n        <animated.div\n          style={{ transform: y.interpolate(v => `translateY(${v}%`) }}\n          className=\"glance\"\n        />\n       </button>)\n\n  const stop = (<button onClick={() => setPlaying(false)}>Home</button>)\n\n  return (\n    <div className = 'App'>\n         <Spring\n          config={{duration: 2500}}\n          from={{ opacity: 0 }}\n          to={{ opacity: 1 }}>\n          {props => <div style={props}>\n            { playing ? null : <h1 style = {{fontSize: \"150px\"}}>BOGGLE</h1> }\n            </div>}\n        </Spring>\n      { playing ? <Game /> : null }\n      { playing ? stop : start } \n        <div className='bubbles'>\n          <ParticlesBg color=\"#000000\" num={100} type=\"cobweb\" bg={true}></ParticlesBg>\n        </div>\n      </div>\n  );\n}\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n  \nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}